{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte"
  ],
  "sourcesContent": [
    "<script>\n\tlet array32 = Array(32).fill(0);\n\tlet a = 5;\n\tlet b = 3;\n\n\tlet isTwosComplement = true;\n\n\t// signed right shift returns unsigned 32-bit int!!\n\t$: purify = isTwosComplement ? (x => x | 0) : (x => x >>> 0);\n\n\t$: a = purify(a);\n\t$: b = purify(b);\n\n\tlet ops = [\n\t\t{name: 'add (+)',   op: (x, y) => x + y},\n\t\t{name: 'sub (-)',   op: (x, y) => x - y},\n\t\t{name: 'and (&)',   op: (x, y) => x & y},\n\t\t{name: 'or (|)',    op: (x, y) => x | y},\n\t\t{name: 'xor (^)',   op: (x, y) => x ^ y},\n\t\t{name: 'sll (<<)',  op: (x, y) => x << y, shift: true },\n\t\t{name: 'srl (>>>)', op: (x, y) => x >>> y, shift: true },\n\t\t{name: 'sra (>>)',  op: (x, y) => x >> y, shift: true },\n\t\t{name: 'slt',  op: (x, y) => (x|0) < (y|0) ? 1 : 0, comparison: true, twosComplement: true},\n\t\t{name: 'sltu',  op: (x, y) => (x>>>0) < (y>>>0) ? 1 : 0, comparison: true, twosComplement: false},\n\t];\n\tlet selectedOp = ops[0];\n\n\tconst bitify = x => [...Array(32).keys()].map(i => (x & (1 << (31 - i)) ? 1 : 0));\n\n\tconst hexify = x => {\n\t\tlet s = (x >>> 0).toString(16).toUpperCase();\n\t\treturn '0x' + '0'.repeat(8 - s.length) + s;\n\t};\n\n\tconst flipA = (i) => { a = purify(a ^ (1 << i)); };\n\tconst flipB = (i) => { b = purify(b ^ (1 << i)); };\n\n\t$: inputMin = isTwosComplement ? (1<<31) : 0;\n\t$: inputMax = isTwosComplement ? ~(1<<31) : (Math.pow(2, 32) - 1);\n\n\t$: abits = bitify(a);\n\t$: bbits = bitify(b);\n\n\t$: res = purify(selectedOp.op(a, b));\n\n\t$: resbits = bitify(res);\n</script>\n\n<main>\n\t<h1>Binary Operations</h1>\n\t<p>The set of operations and mnemonics are from base RISC-V. Click on a bit to toggle it.</p>\n\t<ul>\n\t\t<li>\n\t\t\t<label>\n\t\t\t\t<input type=radio bind:group={isTwosComplement} value={true}> Numbers are 32-bit two's complement integers\n\t\t\t</label>\n\t\t</li>\n\t\t<li>\n\t\t\t<label>\n\t\t\t\t<input type=radio bind:group={isTwosComplement} value={false}> Numbers are 32-bit unsigned integers\n\t\t\t</label>\n\t\t</li>\n\t</ul>\n\t<table>\n\t\t<tr>\n\t\t\t<td></td>\n\t\t\t<td>0b</td>\n\t\t\t{#each abits as bit, i}\n\t\t\t\t<td class=\"bit\" on:click={() => flipA(31 - i)}>{bit}</td>\n\t\t\t{/each}\n\t\t\t<td>=</td><td><input type=\"number\" bind:value={a} min={inputMin} max={inputMax}></td>\n\t\t\t<td>=</td><td>{hexify(a)}</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><select bind:value={selectedOp}>\n\t\t\t\t\t{#each ops as op}\n\t\t\t\t\t\t<option value={op}>{op.name}</option>\n\t\t\t\t\t{/each}\n\t\t\t</select></td>\n\t\t\t<td>0b</td>\n\t\t\t{#each bbits as bit, i}\n\t\t\t\t<td class=\"bit\" on:click={() => flipB(31 - i)}>{bit}</td>\n\t\t\t{/each}\n\t\t\t<td>=</td><td><input type=\"number\" bind:value={b} min={inputMin} max={inputMax}></td>\n\t\t\t<td>=</td><td>{hexify(b)}</td>\n\t\t\t<td class=\"effective\">\n\t\t\t\t{#if selectedOp.shift && !(0 <= b && b < 32)}\n\t\t\t\t\t(effectively {b & 31})\n\t\t\t\t{/if}\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr class=\"result\">\n\t\t\t<td>result:</td>\n\t\t\t<td>0b</td>\n\t\t\t{#each resbits as bit, i}\n\t\t\t\t<td>{bit}</td>\n\t\t\t{/each}\n\t\t\t<td>=</td><td class=\"result-dec\">{res}</td>\n\t\t\t<td>=</td><td>{hexify(res)}</td>\n\t\t</tr>\n\t</table>\n\t{#if selectedOp.comparison && (selectedOp.twosComplement != isTwosComplement)}\n\t\t<p><strong>WARNING</strong>: The display setting is different from the signedness of the comparison! Comparing the displayed decimal numbers may not give the same result as what's computed.</p>\n\t{/if}\n</main>\n\n<style>\n\ttable {\n\t\tfont-family: \"Source Code Pro\", monospace;\n\t}\n\n\ttable {\n\t\tborder-collapse: collapse;\n\t}\n\t.bit { cursor: pointer; }\n\t.bit:hover { background-color: #ffa; }\n\t.result td { padding-top: 1em; border-top: 1px solid black; }\n\t.effective { font-size: 85%; }\n\tinput, .result-dec {\n\t\ttext-align: right;\n\t}\n</style>\n"
  ],
  "names": [],
  "mappings": "AA2GC,KAAK,4BAAC,CAAC,AACN,WAAW,CAAE,iBAAiB,CAAC,CAAC,SAAS,AAC1C,CAAC,AAED,KAAK,4BAAC,CAAC,AACN,eAAe,CAAE,QAAQ,AAC1B,CAAC,AACD,IAAI,4BAAC,CAAC,AAAC,MAAM,CAAE,OAAO,AAAE,CAAC,AACzB,gCAAI,MAAM,AAAC,CAAC,AAAC,gBAAgB,CAAE,IAAI,AAAE,CAAC,AACtC,qBAAO,CAAC,EAAE,cAAC,CAAC,AAAC,WAAW,CAAE,GAAG,CAAE,UAAU,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,AAAE,CAAC,AAC7D,UAAU,4BAAC,CAAC,AAAC,SAAS,CAAE,GAAG,AAAE,CAAC,AAC9B,iCAAK,CAAE,WAAW,4BAAC,CAAC,AACnB,UAAU,CAAE,KAAK,AAClB,CAAC"
}